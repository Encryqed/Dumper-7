# GitHub Actions workflow for building and testing all CMake presets
# Builds happen in parallel for each preset with clear separation of responsibilities
name: CMake Multi-Preset Build & Test

on:
  push:
    branches: [ "main", "development" ]
  pull_request:
    branches: [ "main", "development" ]

env:
  # Base settings for all builds
  CMAKE_BUILD_TYPE: Release

jobs:
  # Job for building and testing
  build-and-test:
    name: ${{ matrix.preset.displayName }} - ${{ matrix.configuration }}
    runs-on: windows-latest
    
    # Matrix for all presets and configurations
    strategy:
      fail-fast: false  # Continue execution of other builds if one fails
      matrix:
        include:
          # Clang presets
          - preset: clang
            configuration: Release
            displayName: Clang
            buildPreset: clang-Release
          - preset: clang
            configuration: Debug
            displayName: Clang
            buildPreset: clang-Debug
          
          # MSVC 2022 presets
          - preset: vs2022
            configuration: Release
            displayName: MSVC 2022
            buildPreset: vs2022-Release
          - preset: vs2022
            configuration: Debug
            displayName: MSVC 2022
            buildPreset: vs2022-Debug
          
          # MSVC 2019 presets
          - preset: vs2019
            configuration: Release
            displayName: MSVC 2019
            buildPreset: vs2019-Release
          - preset: vs2019
            configuration: Debug
            displayName: MSVC 2019
            buildPreset: vs2019-Debug
          
          # MSVC 2017 presets
          - preset: vs2017
            configuration: Release
            displayName: MSVC 2017
            buildPreset: vs2017-Release
          - preset: vs2017
            configuration: Debug
            displayName: MSVC 2017
            buildPreset: vs2017-Debug

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better diagnostics

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v1.14
      with:
        cmake-version: '3.28.0'

    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.1
      with:
        vs-version: '17.0'  # VS 2022 for compatibility with all presets

    - name: Show system info
      run: |
        echo "=== System Information ==="
        echo "OS: ${{ runner.os }}"
        echo "Architecture: ${{ runner.arch }}"
        echo "CMake version:"
        cmake --version
        echo "Compiler info:"
        cl.exe 2>&1 | head -5 || echo "MSVC compiler not available"
        echo "Clang version:"
        clang --version 2>&1 | head -3 || echo "Clang not available"

    - name: Configure CMake
      id: configure
      run: |
        echo "Configuring with preset: ${{ matrix.preset }}"
        echo "Build directory: ${{ github.workspace }}/out/build/${{ matrix.preset }}"
        
        # Configuration using preset
        cmake --preset ${{ matrix.preset }}
        
        # Check configuration result
        if [ $? -eq 0 ]; then
          echo "✅ CMake configuration successful"
          echo "::set-output name=configured::true"
        else
          echo "❌ CMake configuration failed"
          echo "::set-output name=configured::false"
          exit 1
        fi

    - name: Build project
      id: build
      if: steps.configure.outputs.configured == 'true'
      run: |
        echo "Building with preset: ${{ matrix.buildPreset }}"
        echo "Configuration: ${{ matrix.configuration }}"
        
        # Build using build preset
        cmake --build --preset ${{ matrix.buildPreset }}
        
        # Check build result
        if [ $? -eq 0 ]; then
          echo "✅ Build successful"
          echo "::set-output name=built::true"
        else
          echo "❌ Build failed"
          echo "::set-output name=built::false"
          exit 1
        fi

    - name: Run tests
      id: test
      if: steps.build.outputs.built == 'true'
      working-directory: ${{ github.workspace }}/out/build/${{ matrix.preset }}
      run: |
        echo "Running tests for ${{ matrix.displayName }} - ${{ matrix.configuration }}"
        
        # Check if tests are available
        if [ -f "CMakeCache.txt" ]; then
          echo "CMake cache found, checking for test targets..."
          
          # Run tests via CTest
          ctest -C ${{ matrix.configuration }} --output-on-failure --verbose
          
          if [ $? -eq 0 ]; then
            echo "✅ All tests passed"
            echo "::set-output name=tests_passed::true"
          else
            echo "❌ Some tests failed"
            echo "::set-output name=tests_passed::false"
            # Don't interrupt execution, tests might not be configured
          fi
        else
          echo "⚠️ No CMake cache found, skipping tests"
          echo "::set-output name=tests_passed::skipped"
        fi

    - name: Collect build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.preset }}-${{ matrix.configuration }}
        path: |
          ${{ github.workspace }}/out/build/${{ matrix.preset }}
          ${{ github.workspace }}/out/install/${{ matrix.preset }}
        retention-days: 7

    - name: Build summary
      if: always()
      run: |
        echo "=== Build Summary for ${{ matrix.displayName }} - ${{ matrix.configuration }} ==="
        echo "Preset: ${{ matrix.preset }}"
        echo "Configuration: ${{ matrix.configuration }}"
        echo "Configured: ${{ steps.configure.outputs.configured }}"
        echo "Built: ${{ steps.build.outputs.built }}"
        echo "Tests: ${{ steps.test.outputs.tests_passed }}"
        
        if [ "${{ steps.configure.outputs.configured }}" == "true" ] && [ "${{ steps.build.outputs.built }}" == "true" ]; then
          echo "🎉 SUCCESS: ${{ matrix.displayName }} - ${{ matrix.configuration }}"
        else
          echo "💥 FAILED: ${{ matrix.displayName }} - ${{ matrix.configuration }}"
        fi

  # Job for final report
  build-report:
    name: Build Report
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate build report
      run: |
        echo "=== FINAL BUILD REPORT ==="
        echo "Total jobs: ${{ needs.build-and-test.result == 'success' && 'All passed' || 'Some failed' }}"
        echo ""
        echo "Job results:"
        echo "${{ toJSON(needs.build-and-test.outputs) }}"
        
        # Count successful and failed builds
        success_count=0
        failure_count=0
        
        for job in ${{ toJSON(needs.build-and-test.outputs) }}; do
          if [[ "$job" == *"SUCCESS"* ]]; then
            ((success_count++))
          elif [[ "$job" == *"FAILED"* ]]; then
            ((failure_count++))
          fi
        done
        
        echo ""
        echo "Summary:"
        echo "✅ Successful builds: $success_count"
        echo "❌ Failed builds: $failure_count"
        echo "📊 Total builds: $((success_count + failure_count))"
        
        # Set status for other actions
        if [ $failure_count -eq 0 ]; then
          echo "::set-output name=all_passed::true"
          echo "🎉 All builds completed successfully!"
        else
          echo "::set-output name=all_passed::false"
          echo "💥 Some builds failed. Check the logs above."
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo
          });
          
          const botComment = comments.find(comment => comment.user.type === 'Bot' && comment.body.includes('Build Report'));
          
          const reportBody = `## 🏗️ Build Report for PR #${context.issue.number}
          
          **Status**: ${{ needs.build-report.outputs.all_passed == 'true' && '✅ All builds passed' || '❌ Some builds failed' }}
          
          **Build Matrix**:
          - Clang (Debug/Release): ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
          - MSVC 2022 (Debug/Release): ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
          - MSVC 2019 (Debug/Release): ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
          - MSVC 2017 (Debug/Release): ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }}
          
          **Total Builds**: 8
          **Successful**: ${{ needs.build-and-test.result == 'success' && '8' || 'Check logs' }}
          **Failed**: ${{ needs.build-and-test.result == 'success' && '0' || 'Check logs' }}
          
          ${{ needs.build-report.outputs.all_passed == 'true' && '🎉 All configurations built and tested successfully!' || '💥 Some builds failed. Check the workflow logs for details.' }}
          
          ---
          *Generated by GitHub Actions*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportBody
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: reportBody
            });
          }

